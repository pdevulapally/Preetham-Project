rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

function isValidTimestamp() {
  return request.resource.data.timestamp is timestamp;
}

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Chat History Collection
    match /chatHistory/{document=**} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        isValidTimestamp();
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Contact Submissions Collection
    match /contact_submissions/{document} {
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['name', 'email', 'message', 'timestamp']) &&
        isValidTimestamp();
      allow read: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Articles Collection
    match /articles/{articleId} {
      allow read: if true; // Public access for reading articles
      allow create, update: if isAuthenticated() && isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'content', 'author', 'timestamp']) &&
        isValidTimestamp();
      allow delete: if isAdmin();
    }

    // News Submissions Collection
    match /news_submissions/{submissionId} {
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['url', 'submittedBy', 'timestamp']) &&
        request.resource.data.submittedBy == request.auth.uid &&
        isValidTimestamp();
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.submittedBy || isAdmin());
      allow update: if isAdmin();
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.submittedBy || isAdmin());
    }

match /reports/{reportId} {
  allow create: if isAuthenticated() &&
    request.resource.data.keys().hasAll(['type', 'content', 'reportedBy', 'timestamp']) &&
    request.resource.data.reportedBy == request.auth.uid &&
    isValidTimestamp();
  allow read: if isAuthenticated() && 
    (request.auth.uid == resource.data.reportedBy || isAdmin());
  allow update: if isAdmin();
  allow delete: if isAuthenticated() && 
    (request.auth.uid == resource.data.reportedBy || isAdmin());
}

    // Favorites Collection
    match /favorites/{userId}/items/{itemId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isAdmin();
    }

    // User Settings Collection
    match /user_settings/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read, write: if isAdmin();
    }

    // Verification History Collection
    match /verification_history/{document=**} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        isValidTimestamp();
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow update: if false; // Immutable records
    }

    // Admin Logs Collection
    match /admin_logs/{logId} {
      allow read, write: if isAdmin();
    }

    // System Settings Collection
    match /system_settings/{settingId} {
      allow read: if true; // Public access for reading system settings
      allow write: if isAdmin();
    }
  }
}